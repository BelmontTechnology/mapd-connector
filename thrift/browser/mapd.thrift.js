//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MapD_connect_args = function(args) {
  this.user = null;
  this.passwd = null;
  this.dbname = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
MapD_connect_args.prototype = {};
MapD_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_connect_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_connect_result.prototype = {};
MapD_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_disconnect_args.prototype = {};
MapD_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_disconnect_result.prototype = {};
MapD_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_server_status_args.prototype = {};
MapD_get_server_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TServerStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_server_status_result.prototype = {};
MapD_get_server_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_sql_execute_args.prototype = {};
MapD_sql_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TQueryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_sql_execute_result.prototype = {};
MapD_sql_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_validate_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
MapD_sql_validate_args.prototype = {};
MapD_sql_validate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_validate_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_sql_validate_result.prototype = {};
MapD_sql_validate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = {};
        var _ktype113 = 0;
        var _vtype114 = 0;
        _rtmp3116 = input.readMapBegin();
        _ktype113 = _rtmp3116.ktype;
        _vtype114 = _rtmp3116.vtype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          if (_i117 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key118 = null;
          var val119 = null;
          key118 = input.readString().value;
          val119 = new TColumnType();
          val119.read(input);
          this.success[key118] = val119;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter120 in this.success)
    {
      if (this.success.hasOwnProperty(kiter120))
      {
        var viter121 = this.success[kiter120];
        output.writeString(kiter120);
        viter121.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_descriptor_args.prototype = {};
MapD_get_table_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_table_descriptor_result.prototype = {};
MapD_get_table_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size122 = 0;
        var _rtmp3126;
        this.success = {};
        var _ktype123 = 0;
        var _vtype124 = 0;
        _rtmp3126 = input.readMapBegin();
        _ktype123 = _rtmp3126.ktype;
        _vtype124 = _rtmp3126.vtype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          if (_i127 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key128 = null;
          var val129 = null;
          key128 = input.readString().value;
          val129 = new TColumnType();
          val129.read(input);
          this.success[key128] = val129;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter130 in this.success)
    {
      if (this.success.hasOwnProperty(kiter130))
      {
        var viter131 = this.success[kiter130];
        output.writeString(kiter130);
        viter131.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_row_descriptor_args.prototype = {};
MapD_get_row_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_row_descriptor_result.prototype = {};
MapD_get_row_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new TColumnType();
          elem138.read(input);
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_get_frontend_view_args.prototype = {};
MapD_get_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_frontend_view_result.prototype = {};
MapD_get_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_delete_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_delete_frontend_view_args.prototype = {};
MapD_delete_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_delete_frontend_view_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_delete_frontend_view_result.prototype = {};
MapD_delete_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_tables_args.prototype = {};
MapD_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_tables_result.prototype = {};
MapD_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readString().value;
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter147 in this.success)
    {
      if (this.success.hasOwnProperty(iter147))
      {
        iter147 = this.success[iter147];
        output.writeString(iter147);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_users_args.prototype = {};
MapD_get_users_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_users_result.prototype = {};
MapD_get_users_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.success = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = input.readString().value;
          this.success.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter155 in this.success)
    {
      if (this.success.hasOwnProperty(iter155))
      {
        iter155 = this.success[iter155];
        output.writeString(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_databases_args.prototype = {};
MapD_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDBInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_databases_result.prototype = {};
MapD_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.success = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = new TDBInfo();
          elem162.read(input);
          this.success.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter163 in this.success)
    {
      if (this.success.hasOwnProperty(iter163))
      {
        iter163 = this.success[iter163];
        iter163.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_frontend_views_args.prototype = {};
MapD_get_frontend_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TFrontendView]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_frontend_views_result.prototype = {};
MapD_get_frontend_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.success = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = new TFrontendView();
          elem170.read(input);
          this.success.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter171 in this.success)
    {
      if (this.success.hasOwnProperty(iter171))
      {
        iter171 = this.success[iter171];
        iter171.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_args = function(args) {
  this.session = null;
  this.mode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
MapD_set_execution_mode_args.prototype = {};
MapD_set_execution_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_set_execution_mode_result.prototype = {};
MapD_set_execution_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_args = function(args) {
};
MapD_get_version_args.prototype = {};
MapD_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_version_result.prototype = {};
MapD_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_gpu_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_memory_gpu_args.prototype = {};
MapD_get_memory_gpu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_gpu_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_gpu_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_gpu_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_memory_gpu_result.prototype = {};
MapD_get_memory_gpu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_gpu_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_gpu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_summary_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_memory_summary_args.prototype = {};
MapD_get_memory_summary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_summary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_summary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_summary_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TMemorySummary(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_memory_summary_result.prototype = {};
MapD_get_memory_summary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TMemorySummary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_summary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_summary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TRow]);
    }
  }
};
MapD_load_table_binary_args.prototype = {};
MapD_load_table_binary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.rows = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = new TRow();
          elem178.read(input);
          this.rows.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter179 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter179))
      {
        iter179 = this.rows[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_load_table_binary_result.prototype = {};
MapD_load_table_binary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TStringRow]);
    }
  }
};
MapD_load_table_args.prototype = {};
MapD_load_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.rows = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = new TStringRow();
          elem186.read(input);
          this.rows.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter187 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter187))
      {
        iter187 = this.rows[iter187];
        iter187.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_load_table_result.prototype = {};
MapD_load_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_args = function(args) {
  this.session = null;
  this.query = null;
  this.render_type = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.render_type !== undefined && args.render_type !== null) {
      this.render_type = args.render_type;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_render_args.prototype = {};
MapD_render_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.render_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.render_type !== null && this.render_type !== undefined) {
    output.writeFieldBegin('render_type', Thrift.Type.STRING, 3);
    output.writeString(this.render_type);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_render_result.prototype = {};
MapD_render_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.vega_json = null;
  this.compression_level = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
    if (args.compression_level !== undefined && args.compression_level !== null) {
      this.compression_level = args.compression_level;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_render_vega_args.prototype = {};
MapD_render_vega_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compression_level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  if (this.compression_level !== null && this.compression_level !== undefined) {
    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);
    output.writeI32(this.compression_level);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_render_vega_result.prototype = {};
MapD_render_vega_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  this.view_state = null;
  this.image_hash = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_frontend_view_args.prototype = {};
MapD_create_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_frontend_view_result.prototype = {};
MapD_create_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
MapD_detect_column_types_args.prototype = {};
MapD_detect_column_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TDetectResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_detect_column_types_result.prototype = {};
MapD_detect_column_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TDetectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.row_desc = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
  }
};
MapD_create_table_args.prototype = {};
MapD_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.row_desc = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = new TColumnType();
          elem194.read(input);
          this.row_desc.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter195 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter195))
      {
        iter195 = this.row_desc[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_table_result.prototype = {};
MapD_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
MapD_import_table_args.prototype = {};
MapD_import_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_table_result.prototype = {};
MapD_import_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_args = function(args) {
  this.session = null;
  this.import_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.import_id !== undefined && args.import_id !== null) {
      this.import_id = args.import_id;
    }
  }
};
MapD_import_table_status_args.prototype = {};
MapD_import_table_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.import_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.import_id !== null && this.import_id !== undefined) {
    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
    output.writeString(this.import_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TImportStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_table_status_result.prototype = {};
MapD_import_table_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TImportStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_args = function(args) {
  this.session = null;
  this.link = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
MapD_get_link_view_args.prototype = {};
MapD_get_link_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 2);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_link_view_result.prototype = {};
MapD_get_link_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_args = function(args) {
  this.session = null;
  this.view_state = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_link_args.prototype = {};
MapD_create_link_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_link_result.prototype = {};
MapD_create_link_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_rows_for_pixels_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixels = null;
  this.table_name = null;
  this.col_names = null;
  this.column_format = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixels !== undefined && args.pixels !== null) {
      this.pixels = Thrift.copyList(args.pixels, [TPixel]);
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.col_names !== undefined && args.col_names !== null) {
      this.col_names = Thrift.copyList(args.col_names, [null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_rows_for_pixels_args.prototype = {};
MapD_get_rows_for_pixels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.pixels = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new TPixel();
          elem202.read(input);
          this.pixels.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size203 = 0;
        var _rtmp3207;
        this.col_names = [];
        var _etype206 = 0;
        _rtmp3207 = input.readListBegin();
        _etype206 = _rtmp3207.etype;
        _size203 = _rtmp3207.size;
        for (var _i208 = 0; _i208 < _size203; ++_i208)
        {
          var elem209 = null;
          elem209 = input.readString().value;
          this.col_names.push(elem209);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_rows_for_pixels_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_rows_for_pixels_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixels !== null && this.pixels !== undefined) {
    output.writeFieldBegin('pixels', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.pixels.length);
    for (var iter210 in this.pixels)
    {
      if (this.pixels.hasOwnProperty(iter210))
      {
        iter210 = this.pixels[iter210];
        iter210.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.col_names !== null && this.col_names !== undefined) {
    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
    for (var iter211 in this.col_names)
    {
      if (this.col_names.hasOwnProperty(iter211))
      {
        iter211 = this.col_names[iter211];
        output.writeString(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_rows_for_pixels_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPixelResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_rows_for_pixels_result.prototype = {};
MapD_get_rows_for_pixels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPixelResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_rows_for_pixels_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_rows_for_pixels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_name = null;
  this.col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new TPixel(args.pixel);
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.col_names !== undefined && args.col_names !== null) {
      this.col_names = Thrift.copyList(args.col_names, [null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_row_for_pixel_args.prototype = {};
MapD_get_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size212 = 0;
        var _rtmp3216;
        this.col_names = [];
        var _etype215 = 0;
        _rtmp3216 = input.readListBegin();
        _etype215 = _rtmp3216.etype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          var elem218 = null;
          elem218 = input.readString().value;
          this.col_names.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.col_names !== null && this.col_names !== undefined) {
    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
    for (var iter219 in this.col_names)
    {
      if (this.col_names.hasOwnProperty(iter219))
      {
        iter219 = this.col_names[iter219];
        output.writeString(iter219);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 7);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 8);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPixelRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_row_for_pixel_result.prototype = {};
MapD_get_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPixelRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_result_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new TPixel(args.pixel);
    }
    if (args.table_col_names !== undefined && args.table_col_names !== null) {
      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_result_row_for_pixel_args.prototype = {};
MapD_get_result_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size220 = 0;
        var _rtmp3224;
        this.table_col_names = {};
        var _ktype221 = 0;
        var _vtype222 = 0;
        _rtmp3224 = input.readMapBegin();
        _ktype221 = _rtmp3224.ktype;
        _vtype222 = _rtmp3224.vtype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          if (_i225 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key226 = null;
          var val227 = null;
          key226 = input.readString().value;
          var _size228 = 0;
          var _rtmp3232;
          val227 = [];
          var _etype231 = 0;
          _rtmp3232 = input.readListBegin();
          _etype231 = _rtmp3232.etype;
          _size228 = _rtmp3232.size;
          for (var _i233 = 0; _i233 < _size228; ++_i233)
          {
            var elem234 = null;
            elem234 = input.readString().value;
            val227.push(elem234);
          }
          input.readListEnd();
          this.table_col_names[key226] = val227;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_col_names !== null && this.table_col_names !== undefined) {
    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));
    for (var kiter235 in this.table_col_names)
    {
      if (this.table_col_names.hasOwnProperty(kiter235))
      {
        var viter236 = this.table_col_names[kiter235];
        output.writeString(kiter235);
        output.writeListBegin(Thrift.Type.STRING, viter236.length);
        for (var iter237 in viter236)
        {
          if (viter236.hasOwnProperty(iter237))
          {
            iter237 = viter236[iter237];
            output.writeString(iter237);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_result_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPixelTableRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_result_row_for_pixel_result.prototype = {};
MapD_get_result_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPixelTableRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_start_heap_profile_args.prototype = {};
MapD_start_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_heap_profile_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_start_heap_profile_result.prototype = {};
MapD_start_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_stop_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_stop_heap_profile_args.prototype = {};
MapD_stop_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_stop_heap_profile_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_stop_heap_profile_result.prototype = {};
MapD_stop_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_heap_profile_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_heap_profile_args.prototype = {};
MapD_get_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_heap_profile_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_heap_profile_result.prototype = {};
MapD_get_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_geo_table_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.table_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
MapD_import_geo_table_args.prototype = {};
MapD_import_geo_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 3);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_geo_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_geo_table_result.prototype = {};
MapD_import_geo_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_first_step_args = function(args) {
  this.query_id = null;
  if (args) {
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
  }
};
MapD_execute_first_step_args.prototype = {};
MapD_execute_first_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_first_step_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_first_step_args');
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 1);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_first_step_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_execute_first_step_result.prototype = {};
MapD_execute_first_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_first_step_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_first_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_query_args = function(args) {
  this.session = null;
  this.query_ra = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query_ra !== undefined && args.query_ra !== null) {
      this.query_ra = args.query_ra;
    }
  }
};
MapD_start_query_args.prototype = {};
MapD_start_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query_ra = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query_ra !== null && this.query_ra !== undefined) {
    output.writeFieldBegin('query_ra', Thrift.Type.STRING, 2);
    output.writeString(this.query_ra);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_query_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_start_query_result.prototype = {};
MapD_start_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_step_args = function(args) {
  this.query_id = null;
  if (args) {
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
  }
};
MapD_execute_step_args.prototype = {};
MapD_execute_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_step_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_step_args');
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 1);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_step_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_execute_step_result.prototype = {};
MapD_execute_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_step_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_broadcast_serialized_rows_args = function(args) {
  this.serialized_rows = null;
  this.row_desc = null;
  this.query_id = null;
  if (args) {
    if (args.serialized_rows !== undefined && args.serialized_rows !== null) {
      this.serialized_rows = args.serialized_rows;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
  }
};
MapD_broadcast_serialized_rows_args.prototype = {};
MapD_broadcast_serialized_rows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialized_rows = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size238 = 0;
        var _rtmp3242;
        this.row_desc = [];
        var _etype241 = 0;
        _rtmp3242 = input.readListBegin();
        _etype241 = _rtmp3242.etype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          var elem244 = null;
          elem244 = new TColumnType();
          elem244.read(input);
          this.row_desc.push(elem244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_broadcast_serialized_rows_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_broadcast_serialized_rows_args');
  if (this.serialized_rows !== null && this.serialized_rows !== undefined) {
    output.writeFieldBegin('serialized_rows', Thrift.Type.STRING, 1);
    output.writeString(this.serialized_rows);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter245 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter245))
      {
        iter245 = this.row_desc[iter245];
        iter245.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 3);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_broadcast_serialized_rows_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_broadcast_serialized_rows_result.prototype = {};
MapD_broadcast_serialized_rows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_broadcast_serialized_rows_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_broadcast_serialized_rows_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_details_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_details_args.prototype = {};
MapD_get_table_details_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_details_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_details_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_details_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TTableDetails(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_table_details_result.prototype = {};
MapD_get_table_details_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TTableDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_details_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_details_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_clear_gpu_memory_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_clear_gpu_memory_args.prototype = {};
MapD_clear_gpu_memory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_gpu_memory_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_gpu_memory_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_clear_gpu_memory_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_clear_gpu_memory_result.prototype = {};
MapD_clear_gpu_memory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_clear_gpu_memory_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_clear_gpu_memory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapDClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MapDClient.prototype = {};
MapDClient.prototype.connect = function(user, passwd, dbname, callback) {
  this.send_connect(user, passwd, dbname, callback); 
  if (!callback) {
    return this.recv_connect();
  }
};

MapDClient.prototype.send_connect = function(user, passwd, dbname, callback) {
  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_connect_args();
  args.user = user;
  args.passwd = passwd;
  args.dbname = dbname;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_connect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_connect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_connect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'connect failed: unknown result';
};
MapDClient.prototype.disconnect = function(session, callback) {
  this.send_disconnect(session, callback); 
  if (!callback) {
  this.recv_disconnect();
  }
};

MapDClient.prototype.send_disconnect = function(session, callback) {
  this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_disconnect_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_disconnect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_disconnect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_disconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.get_server_status = function(session, callback) {
  this.send_get_server_status(session, callback); 
  if (!callback) {
    return this.recv_get_server_status();
  }
};

MapDClient.prototype.send_get_server_status = function(session, callback) {
  this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_server_status_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_server_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_server_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_server_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_server_status failed: unknown result';
};
MapDClient.prototype.sql_execute = function(session, query, column_format, nonce, callback) {
  this.send_sql_execute(session, query, column_format, nonce, callback); 
  if (!callback) {
    return this.recv_sql_execute();
  }
};

MapDClient.prototype.send_sql_execute = function(session, query, column_format, nonce, callback) {
  this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_sql_execute_args();
  args.session = session;
  args.query = query;
  args.column_format = column_format;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_execute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_sql_execute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_sql_execute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_execute failed: unknown result';
};
MapDClient.prototype.sql_validate = function(session, query, callback) {
  this.send_sql_validate(session, query, callback); 
  if (!callback) {
    return this.recv_sql_validate();
  }
};

MapDClient.prototype.send_sql_validate = function(session, query, callback) {
  this.output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_sql_validate_args();
  args.session = session;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_validate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_sql_validate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_sql_validate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_validate failed: unknown result';
};
MapDClient.prototype.get_table_descriptor = function(session, table_name, callback) {
  this.send_get_table_descriptor(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_table_descriptor();
  }
};

MapDClient.prototype.send_get_table_descriptor = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_table_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_descriptor();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_table_descriptor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_table_descriptor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_descriptor failed: unknown result';
};
MapDClient.prototype.get_row_descriptor = function(session, table_name, callback) {
  this.send_get_row_descriptor(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_row_descriptor();
  }
};

MapDClient.prototype.send_get_row_descriptor = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_row_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_row_descriptor();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_row_descriptor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_row_descriptor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_row_descriptor failed: unknown result';
};
MapDClient.prototype.get_frontend_view = function(session, view_name, callback) {
  this.send_get_frontend_view(session, view_name, callback); 
  if (!callback) {
    return this.recv_get_frontend_view();
  }
};

MapDClient.prototype.send_get_frontend_view = function(session, view_name, callback) {
  this.output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_frontend_view failed: unknown result';
};
MapDClient.prototype.delete_frontend_view = function(session, view_name, callback) {
  this.send_delete_frontend_view(session, view_name, callback); 
  if (!callback) {
  this.recv_delete_frontend_view();
  }
};

MapDClient.prototype.send_delete_frontend_view = function(session, view_name, callback) {
  this.output.writeMessageBegin('delete_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_delete_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_delete_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_delete_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_delete_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.get_tables = function(session, callback) {
  this.send_get_tables(session, callback); 
  if (!callback) {
    return this.recv_get_tables();
  }
};

MapDClient.prototype.send_get_tables = function(session, callback) {
  this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_tables_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_tables();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_tables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_tables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_tables failed: unknown result';
};
MapDClient.prototype.get_users = function(session, callback) {
  this.send_get_users(session, callback); 
  if (!callback) {
    return this.recv_get_users();
  }
};

MapDClient.prototype.send_get_users = function(session, callback) {
  this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_users_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_users();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_users = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_users_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_users failed: unknown result';
};
MapDClient.prototype.get_databases = function(session, callback) {
  this.send_get_databases(session, callback); 
  if (!callback) {
    return this.recv_get_databases();
  }
};

MapDClient.prototype.send_get_databases = function(session, callback) {
  this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_databases_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_databases();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_databases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_databases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_databases failed: unknown result';
};
MapDClient.prototype.get_frontend_views = function(session, callback) {
  this.send_get_frontend_views(session, callback); 
  if (!callback) {
    return this.recv_get_frontend_views();
  }
};

MapDClient.prototype.send_get_frontend_views = function(session, callback) {
  this.output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_frontend_views_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_frontend_views();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_frontend_views = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_frontend_views_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_frontend_views failed: unknown result';
};
MapDClient.prototype.set_execution_mode = function(session, mode, callback) {
  this.send_set_execution_mode(session, mode, callback); 
  if (!callback) {
  this.recv_set_execution_mode();
  }
};

MapDClient.prototype.send_set_execution_mode = function(session, mode, callback) {
  this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_set_execution_mode_args();
  args.session = session;
  args.mode = mode;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_execution_mode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_set_execution_mode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_set_execution_mode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.get_version = function(callback) {
  this.send_get_version(callback); 
  if (!callback) {
    return this.recv_get_version();
  }
};

MapDClient.prototype.send_get_version = function(callback) {
  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_version();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_version failed: unknown result';
};
MapDClient.prototype.get_memory_gpu = function(session, callback) {
  this.send_get_memory_gpu(session, callback); 
  if (!callback) {
    return this.recv_get_memory_gpu();
  }
};

MapDClient.prototype.send_get_memory_gpu = function(session, callback) {
  this.output.writeMessageBegin('get_memory_gpu', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_memory_gpu_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_memory_gpu();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_memory_gpu = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_memory_gpu_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_memory_gpu failed: unknown result';
};
MapDClient.prototype.get_memory_summary = function(session, callback) {
  this.send_get_memory_summary(session, callback); 
  if (!callback) {
    return this.recv_get_memory_summary();
  }
};

MapDClient.prototype.send_get_memory_summary = function(session, callback) {
  this.output.writeMessageBegin('get_memory_summary', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_memory_summary_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_memory_summary();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_memory_summary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_memory_summary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_memory_summary failed: unknown result';
};
MapDClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
  this.send_load_table_binary(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table_binary();
  }
};

MapDClient.prototype.send_load_table_binary = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_load_table_binary_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table_binary();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_load_table_binary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_load_table_binary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.load_table = function(session, table_name, rows, callback) {
  this.send_load_table(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table();
  }
};

MapDClient.prototype.send_load_table = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_load_table_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_load_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_load_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.render = function(session, query, render_type, nonce, callback) {
  this.send_render(session, query, render_type, nonce, callback); 
  if (!callback) {
    return this.recv_render();
  }
};

MapDClient.prototype.send_render = function(session, query, render_type, nonce, callback) {
  this.output.writeMessageBegin('render', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_render_args();
  args.session = session;
  args.query = query;
  args.render_type = render_type;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_render();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_render = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_render_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'render failed: unknown result';
};
MapDClient.prototype.render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this.send_render_vega(session, widget_id, vega_json, compression_level, nonce, callback); 
  if (!callback) {
    return this.recv_render_vega();
  }
};

MapDClient.prototype.send_render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this.output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_render_vega_args();
  args.session = session;
  args.widget_id = widget_id;
  args.vega_json = vega_json;
  args.compression_level = compression_level;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_render_vega();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_render_vega = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_render_vega_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'render_vega failed: unknown result';
};
MapDClient.prototype.create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata, callback) {
  this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata, callback); 
  if (!callback) {
  this.recv_create_frontend_view();
  }
};

MapDClient.prototype.send_create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata, callback) {
  this.output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.view_state = view_state;
  args.image_hash = image_hash;
  args.view_metadata = view_metadata;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.detect_column_types = function(session, file_name, copy_params, callback) {
  this.send_detect_column_types(session, file_name, copy_params, callback); 
  if (!callback) {
    return this.recv_detect_column_types();
  }
};

MapDClient.prototype.send_detect_column_types = function(session, file_name, copy_params, callback) {
  this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_detect_column_types_args();
  args.session = session;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_detect_column_types();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_detect_column_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_detect_column_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'detect_column_types failed: unknown result';
};
MapDClient.prototype.create_table = function(session, table_name, row_desc, callback) {
  this.send_create_table(session, table_name, row_desc, callback); 
  if (!callback) {
  this.recv_create_table();
  }
};

MapDClient.prototype.send_create_table = function(session, table_name, row_desc, callback) {
  this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_table_args();
  args.session = session;
  args.table_name = table_name;
  args.row_desc = row_desc;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.import_table = function(session, table_name, file_name, copy_params, callback) {
  this.send_import_table(session, table_name, file_name, copy_params, callback); 
  if (!callback) {
  this.recv_import_table();
  }
};

MapDClient.prototype.send_import_table = function(session, table_name, file_name, copy_params, callback) {
  this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.import_table_status = function(session, import_id, callback) {
  this.send_import_table_status(session, import_id, callback); 
  if (!callback) {
    return this.recv_import_table_status();
  }
};

MapDClient.prototype.send_import_table_status = function(session, import_id, callback) {
  this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_table_status_args();
  args.session = session;
  args.import_id = import_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_table_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_table_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'import_table_status failed: unknown result';
};
MapDClient.prototype.get_link_view = function(session, link, callback) {
  this.send_get_link_view(session, link, callback); 
  if (!callback) {
    return this.recv_get_link_view();
  }
};

MapDClient.prototype.send_get_link_view = function(session, link, callback) {
  this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_link_view_args();
  args.session = session;
  args.link = link;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_link_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_link_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_link_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_link_view failed: unknown result';
};
MapDClient.prototype.create_link = function(session, view_state, view_metadata, callback) {
  this.send_create_link(session, view_state, view_metadata, callback); 
  if (!callback) {
    return this.recv_create_link();
  }
};

MapDClient.prototype.send_create_link = function(session, view_state, view_metadata, callback) {
  this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_link_args();
  args.session = session;
  args.view_state = view_state;
  args.view_metadata = view_metadata;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_link();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_link = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_link_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create_link failed: unknown result';
};
MapDClient.prototype.get_rows_for_pixels = function(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {
  this.send_get_rows_for_pixels(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback); 
  if (!callback) {
    return this.recv_get_rows_for_pixels();
  }
};

MapDClient.prototype.send_get_rows_for_pixels = function(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {
  this.output.writeMessageBegin('get_rows_for_pixels', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_rows_for_pixels_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixels = pixels;
  args.table_name = table_name;
  args.col_names = col_names;
  args.column_format = column_format;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_rows_for_pixels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_rows_for_pixels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_rows_for_pixels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_rows_for_pixels failed: unknown result';
};
MapDClient.prototype.get_row_for_pixel = function(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {
  this.send_get_row_for_pixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback); 
  if (!callback) {
    return this.recv_get_row_for_pixel();
  }
};

MapDClient.prototype.send_get_row_for_pixel = function(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {
  this.output.writeMessageBegin('get_row_for_pixel', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_name = table_name;
  args.col_names = col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_row_for_pixel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_row_for_pixel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_row_for_pixel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_row_for_pixel failed: unknown result';
};
MapDClient.prototype.get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback); 
  if (!callback) {
    return this.recv_get_result_row_for_pixel();
  }
};

MapDClient.prototype.send_get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this.output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_result_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_col_names = table_col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_result_row_for_pixel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_result_row_for_pixel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_result_row_for_pixel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_result_row_for_pixel failed: unknown result';
};
MapDClient.prototype.start_heap_profile = function(session, callback) {
  this.send_start_heap_profile(session, callback); 
  if (!callback) {
  this.recv_start_heap_profile();
  }
};

MapDClient.prototype.send_start_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_start_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_start_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_start_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_start_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.stop_heap_profile = function(session, callback) {
  this.send_stop_heap_profile(session, callback); 
  if (!callback) {
  this.recv_stop_heap_profile();
  }
};

MapDClient.prototype.send_stop_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_stop_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_stop_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_stop_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_stop_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.get_heap_profile = function(session, callback) {
  this.send_get_heap_profile(session, callback); 
  if (!callback) {
    return this.recv_get_heap_profile();
  }
};

MapDClient.prototype.send_get_heap_profile = function(session, callback) {
  this.output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_heap_profile_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_heap_profile();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_heap_profile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_heap_profile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_heap_profile failed: unknown result';
};
MapDClient.prototype.import_geo_table = function(session, file_name, table_name, copy_params, callback) {
  this.send_import_geo_table(session, file_name, table_name, copy_params, callback); 
  if (!callback) {
  this.recv_import_geo_table();
  }
};

MapDClient.prototype.send_import_geo_table = function(session, file_name, table_name, copy_params, callback) {
  this.output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_geo_table_args();
  args.session = session;
  args.file_name = file_name;
  args.table_name = table_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_geo_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_geo_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_geo_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.execute_first_step = function(query_id, callback) {
  this.send_execute_first_step(query_id, callback); 
  if (!callback) {
    return this.recv_execute_first_step();
  }
};

MapDClient.prototype.send_execute_first_step = function(query_id, callback) {
  this.output.writeMessageBegin('execute_first_step', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_execute_first_step_args();
  args.query_id = query_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_execute_first_step();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_execute_first_step = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_execute_first_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute_first_step failed: unknown result';
};
MapDClient.prototype.start_query = function(session, query_ra, callback) {
  this.send_start_query(session, query_ra, callback); 
  if (!callback) {
    return this.recv_start_query();
  }
};

MapDClient.prototype.send_start_query = function(session, query_ra, callback) {
  this.output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_start_query_args();
  args.session = session;
  args.query_ra = query_ra;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_start_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_start_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_start_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'start_query failed: unknown result';
};
MapDClient.prototype.execute_step = function(query_id, callback) {
  this.send_execute_step(query_id, callback); 
  if (!callback) {
    return this.recv_execute_step();
  }
};

MapDClient.prototype.send_execute_step = function(query_id, callback) {
  this.output.writeMessageBegin('execute_step', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_execute_step_args();
  args.query_id = query_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_execute_step();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_execute_step = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_execute_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute_step failed: unknown result';
};
MapDClient.prototype.broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this.send_broadcast_serialized_rows(serialized_rows, row_desc, query_id, callback); 
  if (!callback) {
  this.recv_broadcast_serialized_rows();
  }
};

MapDClient.prototype.send_broadcast_serialized_rows = function(serialized_rows, row_desc, query_id, callback) {
  this.output.writeMessageBegin('broadcast_serialized_rows', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_broadcast_serialized_rows_args();
  args.serialized_rows = serialized_rows;
  args.row_desc = row_desc;
  args.query_id = query_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_broadcast_serialized_rows();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_broadcast_serialized_rows = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_broadcast_serialized_rows_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.get_table_details = function(session, table_name, callback) {
  this.send_get_table_details(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_table_details();
  }
};

MapDClient.prototype.send_get_table_details = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_table_details', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_table_details_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_details();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_table_details = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_table_details_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_details failed: unknown result';
};
MapDClient.prototype.clear_gpu_memory = function(session, callback) {
  this.send_clear_gpu_memory(session, callback); 
  if (!callback) {
  this.recv_clear_gpu_memory();
  }
};

MapDClient.prototype.send_clear_gpu_memory = function(session, callback) {
  this.output.writeMessageBegin('clear_gpu_memory', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_clear_gpu_memory_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_clear_gpu_memory();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_clear_gpu_memory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_clear_gpu_memory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
