//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./mapd_types');
//HELPER FUNCTIONS AND STRUCTURES

MapD_connect_args = function(args) {
  this.user = null;
  this.passwd = null;
  this.dbname = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
MapD_connect_args.prototype = {};
MapD_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_connect_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_connect_result.prototype = {};
MapD_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_disconnect_args.prototype = {};
MapD_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_disconnect_result.prototype = {};
MapD_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_server_status_args.prototype = {};
MapD_get_server_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TServerStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_server_status_result.prototype = {};
MapD_get_server_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_sql_execute_args.prototype = {};
MapD_sql_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_sql_execute_result.prototype = {};
MapD_sql_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_validate_args = function(args) {
  this.session = null;
  this.query = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
MapD_sql_validate_args.prototype = {};
MapD_sql_validate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_validate_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_sql_validate_result.prototype = {};
MapD_sql_validate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = {};
        var _ktype105 = 0;
        var _vtype106 = 0;
        _rtmp3108 = input.readMapBegin();
        _ktype105 = _rtmp3108.ktype;
        _vtype106 = _rtmp3108.vtype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var key110 = null;
          var val111 = null;
          key110 = input.readString();
          val111 = new ttypes.TColumnType();
          val111.read(input);
          this.success[key110] = val111;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_validate_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_validate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter112 in this.success)
    {
      if (this.success.hasOwnProperty(kiter112))
      {
        var viter113 = this.success[kiter112];
        output.writeString(kiter112);
        viter113.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_descriptor_args.prototype = {};
MapD_get_table_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_table_descriptor_result.prototype = {};
MapD_get_table_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = {};
        var _ktype115 = 0;
        var _vtype116 = 0;
        _rtmp3118 = input.readMapBegin();
        _ktype115 = _rtmp3118.ktype;
        _vtype116 = _rtmp3118.vtype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var key120 = null;
          var val121 = null;
          key120 = input.readString();
          val121 = new ttypes.TColumnType();
          val121.read(input);
          this.success[key120] = val121;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter122 in this.success)
    {
      if (this.success.hasOwnProperty(kiter122))
      {
        var viter123 = this.success[kiter122];
        output.writeString(kiter122);
        viter123.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_row_descriptor_args.prototype = {};
MapD_get_row_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_row_descriptor_result.prototype = {};
MapD_get_row_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.success = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.TColumnType();
          elem130.read(input);
          this.success.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter131 in this.success)
    {
      if (this.success.hasOwnProperty(iter131))
      {
        iter131 = this.success[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_get_frontend_view_args.prototype = {};
MapD_get_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_frontend_view_result.prototype = {};
MapD_get_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_delete_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_delete_frontend_view_args.prototype = {};
MapD_delete_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_delete_frontend_view_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_delete_frontend_view_result.prototype = {};
MapD_delete_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_delete_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_delete_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_tables_args.prototype = {};
MapD_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_tables_result.prototype = {};
MapD_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = input.readString();
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        output.writeString(iter139);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_args = function(args) {
};
MapD_get_users_args.prototype = {};
MapD_get_users_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_users_result.prototype = {};
MapD_get_users_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readString();
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter147 in this.success)
    {
      if (this.success.hasOwnProperty(iter147))
      {
        iter147 = this.success[iter147];
        output.writeString(iter147);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_args = function(args) {
};
MapD_get_databases_args.prototype = {};
MapD_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDBInfo]);
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_databases_result.prototype = {};
MapD_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.success = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = new ttypes.TDBInfo();
          elem154.read(input);
          this.success.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter155 in this.success)
    {
      if (this.success.hasOwnProperty(iter155))
      {
        iter155 = this.success[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_frontend_views_args.prototype = {};
MapD_get_frontend_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TFrontendView]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_frontend_views_result.prototype = {};
MapD_get_frontend_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.success = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = new ttypes.TFrontendView();
          elem162.read(input);
          this.success.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter163 in this.success)
    {
      if (this.success.hasOwnProperty(iter163))
      {
        iter163 = this.success[iter163];
        iter163.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_args = function(args) {
  this.session = null;
  this.mode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
MapD_set_execution_mode_args.prototype = {};
MapD_set_execution_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_set_execution_mode_result.prototype = {};
MapD_set_execution_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_args = function(args) {
};
MapD_get_version_args.prototype = {};
MapD_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_version_result.prototype = {};
MapD_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_gpu_args = function(args) {
};
MapD_get_memory_gpu_args.prototype = {};
MapD_get_memory_gpu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_gpu_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_gpu_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_gpu_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_memory_gpu_result.prototype = {};
MapD_get_memory_gpu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_gpu_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_gpu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_summary_args = function(args) {
};
MapD_get_memory_summary_args.prototype = {};
MapD_get_memory_summary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_summary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_summary_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_memory_summary_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMemorySummary(args.success);
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_memory_summary_result.prototype = {};
MapD_get_memory_summary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMemorySummary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_memory_summary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_memory_summary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
    }
  }
};
MapD_load_table_binary_args.prototype = {};
MapD_load_table_binary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.rows = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = new ttypes.TRow();
          elem170.read(input);
          this.rows.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter171 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter171))
      {
        iter171 = this.rows[iter171];
        iter171.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_load_table_binary_result.prototype = {};
MapD_load_table_binary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TStringRow]);
    }
  }
};
MapD_load_table_args.prototype = {};
MapD_load_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.rows = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = new ttypes.TStringRow();
          elem178.read(input);
          this.rows.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter179 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter179))
      {
        iter179 = this.rows[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_load_table_result.prototype = {};
MapD_load_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_args = function(args) {
  this.session = null;
  this.query = null;
  this.render_type = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.render_type !== undefined && args.render_type !== null) {
      this.render_type = args.render_type;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_render_args.prototype = {};
MapD_render_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.render_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.render_type !== null && this.render_type !== undefined) {
    output.writeFieldBegin('render_type', Thrift.Type.STRING, 3);
    output.writeString(this.render_type);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_render_result.prototype = {};
MapD_render_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.vega_json = null;
  this.compression_level = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.vega_json !== undefined && args.vega_json !== null) {
      this.vega_json = args.vega_json;
    }
    if (args.compression_level !== undefined && args.compression_level !== null) {
      this.compression_level = args.compression_level;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_render_vega_args.prototype = {};
MapD_render_vega_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vega_json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compression_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.vega_json !== null && this.vega_json !== undefined) {
    output.writeFieldBegin('vega_json', Thrift.Type.STRING, 3);
    output.writeString(this.vega_json);
    output.writeFieldEnd();
  }
  if (this.compression_level !== null && this.compression_level !== undefined) {
    output.writeFieldBegin('compression_level', Thrift.Type.I32, 4);
    output.writeI32(this.compression_level);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 5);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_vega_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TRenderResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_render_vega_result.prototype = {};
MapD_render_vega_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRenderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_vega_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_vega_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  this.view_state = null;
  this.image_hash = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_frontend_view_args.prototype = {};
MapD_create_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 5);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_frontend_view_result.prototype = {};
MapD_create_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
MapD_detect_column_types_args.prototype = {};
MapD_detect_column_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDetectResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_detect_column_types_result.prototype = {};
MapD_detect_column_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDetectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.row_desc = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [ttypes.TColumnType]);
    }
  }
};
MapD_create_table_args.prototype = {};
MapD_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.row_desc = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = new ttypes.TColumnType();
          elem186.read(input);
          this.row_desc.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter187 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter187))
      {
        iter187 = this.row_desc[iter187];
        iter187.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_table_result.prototype = {};
MapD_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
MapD_import_table_args.prototype = {};
MapD_import_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_table_result.prototype = {};
MapD_import_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_args = function(args) {
  this.session = null;
  this.import_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.import_id !== undefined && args.import_id !== null) {
      this.import_id = args.import_id;
    }
  }
};
MapD_import_table_status_args.prototype = {};
MapD_import_table_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.import_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.import_id !== null && this.import_id !== undefined) {
    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
    output.writeString(this.import_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TImportStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_table_status_result.prototype = {};
MapD_import_table_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TImportStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_args = function(args) {
  this.session = null;
  this.link = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
MapD_get_link_view_args.prototype = {};
MapD_get_link_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 2);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_link_view_result.prototype = {};
MapD_get_link_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_args = function(args) {
  this.session = null;
  this.view_state = null;
  this.view_metadata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.view_metadata !== undefined && args.view_metadata !== null) {
      this.view_metadata = args.view_metadata;
    }
  }
};
MapD_create_link_args.prototype = {};
MapD_create_link_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.view_metadata !== null && this.view_metadata !== undefined) {
    output.writeFieldBegin('view_metadata', Thrift.Type.STRING, 3);
    output.writeString(this.view_metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_link_result.prototype = {};
MapD_create_link_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_rows_for_pixels_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixels = null;
  this.table_name = null;
  this.col_names = null;
  this.column_format = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixels !== undefined && args.pixels !== null) {
      this.pixels = Thrift.copyList(args.pixels, [ttypes.TPixel]);
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.col_names !== undefined && args.col_names !== null) {
      this.col_names = Thrift.copyList(args.col_names, [null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_rows_for_pixels_args.prototype = {};
MapD_get_rows_for_pixels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.pixels = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = new ttypes.TPixel();
          elem194.read(input);
          this.pixels.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size195 = 0;
        var _rtmp3199;
        this.col_names = [];
        var _etype198 = 0;
        _rtmp3199 = input.readListBegin();
        _etype198 = _rtmp3199.etype;
        _size195 = _rtmp3199.size;
        for (var _i200 = 0; _i200 < _size195; ++_i200)
        {
          var elem201 = null;
          elem201 = input.readString();
          this.col_names.push(elem201);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_rows_for_pixels_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_rows_for_pixels_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixels !== null && this.pixels !== undefined) {
    output.writeFieldBegin('pixels', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.pixels.length);
    for (var iter202 in this.pixels)
    {
      if (this.pixels.hasOwnProperty(iter202))
      {
        iter202 = this.pixels[iter202];
        iter202.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.col_names !== null && this.col_names !== undefined) {
    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
    for (var iter203 in this.col_names)
    {
      if (this.col_names.hasOwnProperty(iter203))
      {
        iter203 = this.col_names[iter203];
        output.writeString(iter203);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_rows_for_pixels_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPixelResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_rows_for_pixels_result.prototype = {};
MapD_get_rows_for_pixels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPixelResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_rows_for_pixels_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_rows_for_pixels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_name = null;
  this.col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new ttypes.TPixel(args.pixel);
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.col_names !== undefined && args.col_names !== null) {
      this.col_names = Thrift.copyList(args.col_names, [null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_row_for_pixel_args.prototype = {};
MapD_get_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new ttypes.TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.col_names = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = input.readString();
          this.col_names.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 4);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.col_names !== null && this.col_names !== undefined) {
    output.writeFieldBegin('col_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.col_names.length);
    for (var iter211 in this.col_names)
    {
      if (this.col_names.hasOwnProperty(iter211))
      {
        iter211 = this.col_names[iter211];
        output.writeString(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 6);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 7);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 8);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPixelRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_row_for_pixel_result.prototype = {};
MapD_get_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPixelRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_result_row_for_pixel_args = function(args) {
  this.session = null;
  this.widget_id = null;
  this.pixel = null;
  this.table_col_names = null;
  this.column_format = null;
  this.pixelRadius = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.widget_id !== undefined && args.widget_id !== null) {
      this.widget_id = args.widget_id;
    }
    if (args.pixel !== undefined && args.pixel !== null) {
      this.pixel = new ttypes.TPixel(args.pixel);
    }
    if (args.table_col_names !== undefined && args.table_col_names !== null) {
      this.table_col_names = Thrift.copyMap(args.table_col_names, [Thrift.copyList, null]);
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.pixelRadius !== undefined && args.pixelRadius !== null) {
      this.pixelRadius = args.pixelRadius;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_get_result_row_for_pixel_args.prototype = {};
MapD_get_result_row_for_pixel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.widget_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new ttypes.TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size212 = 0;
        var _rtmp3216;
        this.table_col_names = {};
        var _ktype213 = 0;
        var _vtype214 = 0;
        _rtmp3216 = input.readMapBegin();
        _ktype213 = _rtmp3216.ktype;
        _vtype214 = _rtmp3216.vtype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          var key218 = null;
          var val219 = null;
          key218 = input.readString();
          var _size220 = 0;
          var _rtmp3224;
          val219 = [];
          var _etype223 = 0;
          _rtmp3224 = input.readListBegin();
          _etype223 = _rtmp3224.etype;
          _size220 = _rtmp3224.size;
          for (var _i225 = 0; _i225 < _size220; ++_i225)
          {
            var elem226 = null;
            elem226 = input.readString();
            val219.push(elem226);
          }
          input.readListEnd();
          this.table_col_names[key218] = val219;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pixelRadius = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.widget_id !== null && this.widget_id !== undefined) {
    output.writeFieldBegin('widget_id', Thrift.Type.I64, 2);
    output.writeI64(this.widget_id);
    output.writeFieldEnd();
  }
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 3);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.table_col_names !== null && this.table_col_names !== undefined) {
    output.writeFieldBegin('table_col_names', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.table_col_names));
    for (var kiter227 in this.table_col_names)
    {
      if (this.table_col_names.hasOwnProperty(kiter227))
      {
        var viter228 = this.table_col_names[kiter227];
        output.writeString(kiter227);
        output.writeListBegin(Thrift.Type.STRING, viter228.length);
        for (var iter229 in viter228)
        {
          if (viter228.hasOwnProperty(iter229))
          {
            iter229 = viter228[iter229];
            output.writeString(iter229);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 5);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.pixelRadius !== null && this.pixelRadius !== undefined) {
    output.writeFieldBegin('pixelRadius', Thrift.Type.I32, 6);
    output.writeI32(this.pixelRadius);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 7);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_result_row_for_pixel_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TPixelTableRowResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_result_row_for_pixel_result.prototype = {};
MapD_get_result_row_for_pixel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TPixelTableRowResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_result_row_for_pixel_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_result_row_for_pixel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_heap_profile_args = function(args) {
};
MapD_start_heap_profile_args.prototype = {};
MapD_start_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_heap_profile_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_start_heap_profile_result.prototype = {};
MapD_start_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_stop_heap_profile_args = function(args) {
};
MapD_stop_heap_profile_args.prototype = {};
MapD_stop_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_stop_heap_profile_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_stop_heap_profile_result.prototype = {};
MapD_stop_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_stop_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_stop_heap_profile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_heap_profile_args = function(args) {
};
MapD_get_heap_profile_args.prototype = {};
MapD_get_heap_profile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_heap_profile_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_heap_profile_result.prototype = {};
MapD_get_heap_profile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_heap_profile_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_heap_profile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_geo_table_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.table_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new ttypes.TCopyParams(args.copy_params);
    }
  }
};
MapD_import_geo_table_args.prototype = {};
MapD_import_geo_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new ttypes.TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 3);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_geo_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_geo_table_result.prototype = {};
MapD_import_geo_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_geo_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_geo_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_query_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  this.nonce = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
    if (args.nonce !== undefined && args.nonce !== null) {
      this.nonce = args.nonce;
    }
  }
};
MapD_start_query_args.prototype = {};
MapD_start_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 4);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_start_query_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_start_query_result.prototype = {};
MapD_start_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_start_query_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_start_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_step_args = function(args) {
  this.query_id = null;
  if (args) {
    if (args.query_id !== undefined && args.query_id !== null) {
      this.query_id = args.query_id;
    }
  }
};
MapD_execute_step_args.prototype = {};
MapD_execute_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.query_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_step_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_step_args');
  if (this.query_id !== null && this.query_id !== undefined) {
    output.writeFieldBegin('query_id', Thrift.Type.I64, 1);
    output.writeI64(this.query_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_execute_step_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof ttypes.TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ttypes.ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStepResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_execute_step_result.prototype = {};
MapD_execute_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_execute_step_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_execute_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapDClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
MapDClient.prototype = {};
MapDClient.prototype.seqid = function() { return this._seqid; }
MapDClient.prototype.new_seqid = function() { return this._seqid += 1; }
MapDClient.prototype.connect = function(user, passwd, dbname, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_connect(user, passwd, dbname);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_connect(user, passwd, dbname);
  }
};

MapDClient.prototype.send_connect = function(user, passwd, dbname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_connect_args();
  args.user = user;
  args.passwd = passwd;
  args.dbname = dbname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_connect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_connect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('connect failed: unknown result');
};
MapDClient.prototype.disconnect = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disconnect(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disconnect(session);
  }
};

MapDClient.prototype.send_disconnect = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_disconnect_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_disconnect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_disconnect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.get_server_status = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_server_status(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_server_status(session);
  }
};

MapDClient.prototype.send_get_server_status = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_server_status_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_server_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_server_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_server_status failed: unknown result');
};
MapDClient.prototype.sql_execute = function(session, query, column_format, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_execute(session, query, column_format, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_execute(session, query, column_format, nonce);
  }
};

MapDClient.prototype.send_sql_execute = function(session, query, column_format, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_sql_execute_args();
  args.session = session;
  args.query = query;
  args.column_format = column_format;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_sql_execute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_sql_execute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_execute failed: unknown result');
};
MapDClient.prototype.sql_validate = function(session, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sql_validate(session, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sql_validate(session, query);
  }
};

MapDClient.prototype.send_sql_validate = function(session, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sql_validate', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_sql_validate_args();
  args.session = session;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_sql_validate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_sql_validate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sql_validate failed: unknown result');
};
MapDClient.prototype.get_table_descriptor = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_descriptor(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_descriptor(session, table_name);
  }
};

MapDClient.prototype.send_get_table_descriptor = function(session, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_table_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_table_descriptor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_table_descriptor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_descriptor failed: unknown result');
};
MapDClient.prototype.get_row_descriptor = function(session, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row_descriptor(session, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row_descriptor(session, table_name);
  }
};

MapDClient.prototype.send_get_row_descriptor = function(session, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_row_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_row_descriptor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_row_descriptor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row_descriptor failed: unknown result');
};
MapDClient.prototype.get_frontend_view = function(session, view_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_frontend_view(session, view_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_frontend_view(session, view_name);
  }
};

MapDClient.prototype.send_get_frontend_view = function(session, view_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_frontend_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_frontend_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_frontend_view failed: unknown result');
};
MapDClient.prototype.delete_frontend_view = function(session, view_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_frontend_view(session, view_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_frontend_view(session, view_name);
  }
};

MapDClient.prototype.send_delete_frontend_view = function(session, view_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_frontend_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_delete_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_delete_frontend_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_delete_frontend_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.get_tables = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables(session);
  }
};

MapDClient.prototype.send_get_tables = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_tables_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};
MapDClient.prototype.get_users = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_users();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_users();
  }
};

MapDClient.prototype.send_get_users = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_users_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_users = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_users_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_users failed: unknown result');
};
MapDClient.prototype.get_databases = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_databases();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_databases();
  }
};

MapDClient.prototype.send_get_databases = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_databases_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_databases failed: unknown result');
};
MapDClient.prototype.get_frontend_views = function(session, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_frontend_views(session);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_frontend_views(session);
  }
};

MapDClient.prototype.send_get_frontend_views = function(session) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_frontend_views_args();
  args.session = session;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_frontend_views = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_frontend_views_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_frontend_views failed: unknown result');
};
MapDClient.prototype.set_execution_mode = function(session, mode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_execution_mode(session, mode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_execution_mode(session, mode);
  }
};

MapDClient.prototype.send_set_execution_mode = function(session, mode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_set_execution_mode_args();
  args.session = session;
  args.mode = mode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_set_execution_mode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_set_execution_mode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.get_version = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_version();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_version();
  }
};

MapDClient.prototype.send_get_version = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_version_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_version failed: unknown result');
};
MapDClient.prototype.get_memory_gpu = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_memory_gpu();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_memory_gpu();
  }
};

MapDClient.prototype.send_get_memory_gpu = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_memory_gpu', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_memory_gpu_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_memory_gpu = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_memory_gpu_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_memory_gpu failed: unknown result');
};
MapDClient.prototype.get_memory_summary = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_memory_summary();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_memory_summary();
  }
};

MapDClient.prototype.send_get_memory_summary = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_memory_summary', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_memory_summary_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_memory_summary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_memory_summary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_memory_summary failed: unknown result');
};
MapDClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table_binary(session, table_name, rows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table_binary(session, table_name, rows);
  }
};

MapDClient.prototype.send_load_table_binary = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_binary_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_load_table_binary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_load_table_binary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.load_table = function(session, table_name, rows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_load_table(session, table_name, rows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_load_table(session, table_name, rows);
  }
};

MapDClient.prototype.send_load_table = function(session, table_name, rows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_load_table_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_load_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_load_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.render = function(session, query, render_type, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_render(session, query, render_type, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_render(session, query, render_type, nonce);
  }
};

MapDClient.prototype.send_render = function(session, query, render_type, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('render', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_render_args();
  args.session = session;
  args.query = query;
  args.render_type = render_type;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_render = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_render_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('render failed: unknown result');
};
MapDClient.prototype.render_vega = function(session, widget_id, vega_json, compression_level, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_render_vega(session, widget_id, vega_json, compression_level, nonce);
  }
};

MapDClient.prototype.send_render_vega = function(session, widget_id, vega_json, compression_level, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('render_vega', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_render_vega_args();
  args.session = session;
  args.widget_id = widget_id;
  args.vega_json = vega_json;
  args.compression_level = compression_level;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_render_vega = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_render_vega_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('render_vega failed: unknown result');
};
MapDClient.prototype.create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_frontend_view(session, view_name, view_state, image_hash, view_metadata);
  }
};

MapDClient.prototype.send_create_frontend_view = function(session, view_name, view_state, image_hash, view_metadata) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_create_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.view_state = view_state;
  args.image_hash = image_hash;
  args.view_metadata = view_metadata;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_create_frontend_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_create_frontend_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.detect_column_types = function(session, file_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_detect_column_types(session, file_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_detect_column_types(session, file_name, copy_params);
  }
};

MapDClient.prototype.send_detect_column_types = function(session, file_name, copy_params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_detect_column_types_args();
  args.session = session;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_detect_column_types = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_detect_column_types_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('detect_column_types failed: unknown result');
};
MapDClient.prototype.create_table = function(session, table_name, row_desc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_table(session, table_name, row_desc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_table(session, table_name, row_desc);
  }
};

MapDClient.prototype.send_create_table = function(session, table_name, row_desc) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_create_table_args();
  args.session = session;
  args.table_name = table_name;
  args.row_desc = row_desc;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_create_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_create_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.import_table = function(session, table_name, file_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_table(session, table_name, file_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_table(session, table_name, file_name, copy_params);
  }
};

MapDClient.prototype.send_import_table = function(session, table_name, file_name, copy_params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_import_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_import_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_import_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.import_table_status = function(session, import_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_table_status(session, import_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_table_status(session, import_id);
  }
};

MapDClient.prototype.send_import_table_status = function(session, import_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_import_table_status_args();
  args.session = session;
  args.import_id = import_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_import_table_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_import_table_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('import_table_status failed: unknown result');
};
MapDClient.prototype.get_link_view = function(session, link, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_link_view(session, link);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_link_view(session, link);
  }
};

MapDClient.prototype.send_get_link_view = function(session, link) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_link_view_args();
  args.session = session;
  args.link = link;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_link_view = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_link_view_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_link_view failed: unknown result');
};
MapDClient.prototype.create_link = function(session, view_state, view_metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_link(session, view_state, view_metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_link(session, view_state, view_metadata);
  }
};

MapDClient.prototype.send_create_link = function(session, view_state, view_metadata) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_create_link_args();
  args.session = session;
  args.view_state = view_state;
  args.view_metadata = view_metadata;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_create_link = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_create_link_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_link failed: unknown result');
};
MapDClient.prototype.get_rows_for_pixels = function(session, widget_id, pixels, table_name, col_names, column_format, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_rows_for_pixels(session, widget_id, pixels, table_name, col_names, column_format, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_rows_for_pixels(session, widget_id, pixels, table_name, col_names, column_format, nonce);
  }
};

MapDClient.prototype.send_get_rows_for_pixels = function(session, widget_id, pixels, table_name, col_names, column_format, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_rows_for_pixels', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_rows_for_pixels_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixels = pixels;
  args.table_name = table_name;
  args.col_names = col_names;
  args.column_format = column_format;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_rows_for_pixels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_rows_for_pixels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_rows_for_pixels failed: unknown result');
};
MapDClient.prototype.get_row_for_pixel = function(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row_for_pixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row_for_pixel(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce);
  }
};

MapDClient.prototype.send_get_row_for_pixel = function(session, widget_id, pixel, table_name, col_names, column_format, pixelRadius, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_row_for_pixel', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_name = table_name;
  args.col_names = col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_row_for_pixel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_row_for_pixel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row_for_pixel failed: unknown result');
};
MapDClient.prototype.get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_result_row_for_pixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
  }
};

MapDClient.prototype.send_get_result_row_for_pixel = function(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_result_row_for_pixel', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_result_row_for_pixel_args();
  args.session = session;
  args.widget_id = widget_id;
  args.pixel = pixel;
  args.table_col_names = table_col_names;
  args.column_format = column_format;
  args.pixelRadius = pixelRadius;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_result_row_for_pixel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_result_row_for_pixel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_result_row_for_pixel failed: unknown result');
};
MapDClient.prototype.start_heap_profile = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start_heap_profile();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_heap_profile();
  }
};

MapDClient.prototype.send_start_heap_profile = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start_heap_profile', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_start_heap_profile_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_start_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_start_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.stop_heap_profile = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stop_heap_profile();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stop_heap_profile();
  }
};

MapDClient.prototype.send_stop_heap_profile = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stop_heap_profile', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_stop_heap_profile_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_stop_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_stop_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.get_heap_profile = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_heap_profile();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_heap_profile();
  }
};

MapDClient.prototype.send_get_heap_profile = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_heap_profile', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_get_heap_profile_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_get_heap_profile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_get_heap_profile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_heap_profile failed: unknown result');
};
MapDClient.prototype.import_geo_table = function(session, file_name, table_name, copy_params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_import_geo_table(session, file_name, table_name, copy_params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_import_geo_table(session, file_name, table_name, copy_params);
  }
};

MapDClient.prototype.send_import_geo_table = function(session, file_name, table_name, copy_params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('import_geo_table', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_import_geo_table_args();
  args.session = session;
  args.file_name = file_name;
  args.table_name = table_name;
  args.copy_params = copy_params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_import_geo_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_import_geo_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
MapDClient.prototype.start_query = function(session, query, column_format, nonce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start_query(session, query, column_format, nonce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start_query(session, query, column_format, nonce);
  }
};

MapDClient.prototype.send_start_query = function(session, query, column_format, nonce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start_query', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_start_query_args();
  args.session = session;
  args.query = query;
  args.column_format = column_format;
  args.nonce = nonce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_start_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_start_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start_query failed: unknown result');
};
MapDClient.prototype.execute_step = function(query_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_execute_step(query_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute_step(query_id);
  }
};

MapDClient.prototype.send_execute_step = function(query_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_step', Thrift.MessageType.CALL, this.seqid());
  var args = new MapD_execute_step_args();
  args.query_id = query_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MapDClient.prototype.recv_execute_step = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MapD_execute_step_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_step failed: unknown result');
};
MapDProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MapDProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MapDProcessor.prototype.process_connect = function(seqid, input, output) {
  var args = new MapD_connect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.connect.length === 3) {
    Q.fcall(this._handler.connect, args.user, args.passwd, args.dbname)
      .then(function(result) {
        var result = new MapD_connect_result({success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_connect_result(err);
          output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.connect(args.user, args.passwd, args.dbname, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_connect_result((err != null ? err : {success: result}));
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_disconnect = function(seqid, input, output) {
  var args = new MapD_disconnect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disconnect.length === 1) {
    Q.fcall(this._handler.disconnect, args.session)
      .then(function(result) {
        var result = new MapD_disconnect_result({success: result});
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_disconnect_result(err);
          output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disconnect(args.session, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_disconnect_result((err != null ? err : {success: result}));
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_server_status = function(seqid, input, output) {
  var args = new MapD_get_server_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_server_status.length === 1) {
    Q.fcall(this._handler.get_server_status, args.session)
      .then(function(result) {
        var result = new MapD_get_server_status_result({success: result});
        output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_server_status_result(err);
          output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_server_status(args.session, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_server_status_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_server_status", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_server_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_sql_execute = function(seqid, input, output) {
  var args = new MapD_sql_execute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_execute.length === 4) {
    Q.fcall(this._handler.sql_execute, args.session, args.query, args.column_format, args.nonce)
      .then(function(result) {
        var result = new MapD_sql_execute_result({success: result});
        output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_sql_execute_result(err);
          output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sql_execute(args.session, args.query, args.column_format, args.nonce, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_sql_execute_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sql_execute", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_execute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_sql_validate = function(seqid, input, output) {
  var args = new MapD_sql_validate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sql_validate.length === 2) {
    Q.fcall(this._handler.sql_validate, args.session, args.query)
      .then(function(result) {
        var result = new MapD_sql_validate_result({success: result});
        output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_sql_validate_result(err);
          output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sql_validate(args.session, args.query, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_sql_validate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sql_validate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sql_validate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_table_descriptor = function(seqid, input, output) {
  var args = new MapD_get_table_descriptor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_descriptor.length === 2) {
    Q.fcall(this._handler.get_table_descriptor, args.session, args.table_name)
      .then(function(result) {
        var result = new MapD_get_table_descriptor_result({success: result});
        output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_table_descriptor_result(err);
          output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_descriptor(args.session, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_table_descriptor_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_descriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_row_descriptor = function(seqid, input, output) {
  var args = new MapD_get_row_descriptor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row_descriptor.length === 2) {
    Q.fcall(this._handler.get_row_descriptor, args.session, args.table_name)
      .then(function(result) {
        var result = new MapD_get_row_descriptor_result({success: result});
        output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_row_descriptor_result(err);
          output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_row_descriptor(args.session, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_row_descriptor_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_descriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_frontend_view = function(seqid, input, output) {
  var args = new MapD_get_frontend_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_frontend_view.length === 2) {
    Q.fcall(this._handler.get_frontend_view, args.session, args.view_name)
      .then(function(result) {
        var result = new MapD_get_frontend_view_result({success: result});
        output.writeMessageBegin("get_frontend_view", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_frontend_view_result(err);
          output.writeMessageBegin("get_frontend_view", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_frontend_view(args.session, args.view_name, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_frontend_view_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_frontend_view", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_delete_frontend_view = function(seqid, input, output) {
  var args = new MapD_delete_frontend_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_frontend_view.length === 2) {
    Q.fcall(this._handler.delete_frontend_view, args.session, args.view_name)
      .then(function(result) {
        var result = new MapD_delete_frontend_view_result({success: result});
        output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_delete_frontend_view_result(err);
          output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_frontend_view(args.session, args.view_name, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_delete_frontend_view_result((err != null ? err : {success: result}));
        output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new MapD_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables.length === 1) {
    Q.fcall(this._handler.get_tables, args.session)
      .then(function(result) {
        var result = new MapD_get_tables_result({success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_tables_result(err);
          output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_tables(args.session, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_tables_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_users = function(seqid, input, output) {
  var args = new MapD_get_users_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_users.length === 0) {
    Q.fcall(this._handler.get_users)
      .then(function(result) {
        var result = new MapD_get_users_result({success: result});
        output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ThriftException) {
          var result = new MapD_get_users_result(err);
          output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_users(function (err, result) {
      if (err == null || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_users_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_users", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_users", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new MapD_get_databases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_databases.length === 0) {
    Q.fcall(this._handler.get_databases)
      .then(function(result) {
        var result = new MapD_get_databases_result({success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ThriftException) {
          var result = new MapD_get_databases_result(err);
          output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_databases(function (err, result) {
      if (err == null || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_databases_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_frontend_views = function(seqid, input, output) {
  var args = new MapD_get_frontend_views_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_frontend_views.length === 1) {
    Q.fcall(this._handler.get_frontend_views, args.session)
      .then(function(result) {
        var result = new MapD_get_frontend_views_result({success: result});
        output.writeMessageBegin("get_frontend_views", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_frontend_views_result(err);
          output.writeMessageBegin("get_frontend_views", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_frontend_views", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_frontend_views(args.session, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_frontend_views_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_frontend_views", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_frontend_views", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_set_execution_mode = function(seqid, input, output) {
  var args = new MapD_set_execution_mode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_execution_mode.length === 2) {
    Q.fcall(this._handler.set_execution_mode, args.session, args.mode)
      .then(function(result) {
        var result = new MapD_set_execution_mode_result({success: result});
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_set_execution_mode_result(err);
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_execution_mode(args.session, args.mode, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_set_execution_mode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_execution_mode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_version = function(seqid, input, output) {
  var args = new MapD_get_version_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_version.length === 0) {
    Q.fcall(this._handler.get_version)
      .then(function(result) {
        var result = new MapD_get_version_result({success: result});
        output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ThriftException) {
          var result = new MapD_get_version_result(err);
          output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_version(function (err, result) {
      if (err == null || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_version_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_version", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_memory_gpu = function(seqid, input, output) {
  var args = new MapD_get_memory_gpu_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_memory_gpu.length === 0) {
    Q.fcall(this._handler.get_memory_gpu)
      .then(function(result) {
        var result = new MapD_get_memory_gpu_result({success: result});
        output.writeMessageBegin("get_memory_gpu", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ThriftException) {
          var result = new MapD_get_memory_gpu_result(err);
          output.writeMessageBegin("get_memory_gpu", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_memory_gpu", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_memory_gpu(function (err, result) {
      if (err == null || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_memory_gpu_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_memory_gpu", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_memory_gpu", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_memory_summary = function(seqid, input, output) {
  var args = new MapD_get_memory_summary_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_memory_summary.length === 0) {
    Q.fcall(this._handler.get_memory_summary)
      .then(function(result) {
        var result = new MapD_get_memory_summary_result({success: result});
        output.writeMessageBegin("get_memory_summary", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ThriftException) {
          var result = new MapD_get_memory_summary_result(err);
          output.writeMessageBegin("get_memory_summary", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_memory_summary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_memory_summary(function (err, result) {
      if (err == null || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_memory_summary_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_memory_summary", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_memory_summary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_load_table_binary = function(seqid, input, output) {
  var args = new MapD_load_table_binary_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.load_table_binary.length === 3) {
    Q.fcall(this._handler.load_table_binary, args.session, args.table_name, args.rows)
      .then(function(result) {
        var result = new MapD_load_table_binary_result({success: result});
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_load_table_binary_result(err);
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.load_table_binary(args.session, args.table_name, args.rows, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_load_table_binary_result((err != null ? err : {success: result}));
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table_binary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_load_table = function(seqid, input, output) {
  var args = new MapD_load_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.load_table.length === 3) {
    Q.fcall(this._handler.load_table, args.session, args.table_name, args.rows)
      .then(function(result) {
        var result = new MapD_load_table_result({success: result});
        output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_load_table_result(err);
          output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.load_table(args.session, args.table_name, args.rows, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_load_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("load_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("load_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_render = function(seqid, input, output) {
  var args = new MapD_render_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.render.length === 4) {
    Q.fcall(this._handler.render, args.session, args.query, args.render_type, args.nonce)
      .then(function(result) {
        var result = new MapD_render_result({success: result});
        output.writeMessageBegin("render", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_render_result(err);
          output.writeMessageBegin("render", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("render", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.render(args.session, args.query, args.render_type, args.nonce, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_render_result((err != null ? err : {success: result}));
        output.writeMessageBegin("render", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("render", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_render_vega = function(seqid, input, output) {
  var args = new MapD_render_vega_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.render_vega.length === 5) {
    Q.fcall(this._handler.render_vega, args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce)
      .then(function(result) {
        var result = new MapD_render_vega_result({success: result});
        output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_render_vega_result(err);
          output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.render_vega(args.session, args.widget_id, args.vega_json, args.compression_level, args.nonce, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_render_vega_result((err != null ? err : {success: result}));
        output.writeMessageBegin("render_vega", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("render_vega", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_create_frontend_view = function(seqid, input, output) {
  var args = new MapD_create_frontend_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_frontend_view.length === 5) {
    Q.fcall(this._handler.create_frontend_view, args.session, args.view_name, args.view_state, args.image_hash, args.view_metadata)
      .then(function(result) {
        var result = new MapD_create_frontend_view_result({success: result});
        output.writeMessageBegin("create_frontend_view", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_create_frontend_view_result(err);
          output.writeMessageBegin("create_frontend_view", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_frontend_view(args.session, args.view_name, args.view_state, args.image_hash, args.view_metadata, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_create_frontend_view_result((err != null ? err : {success: result}));
        output.writeMessageBegin("create_frontend_view", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_frontend_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_detect_column_types = function(seqid, input, output) {
  var args = new MapD_detect_column_types_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.detect_column_types.length === 3) {
    Q.fcall(this._handler.detect_column_types, args.session, args.file_name, args.copy_params)
      .then(function(result) {
        var result = new MapD_detect_column_types_result({success: result});
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_detect_column_types_result(err);
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.detect_column_types(args.session, args.file_name, args.copy_params, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_detect_column_types_result((err != null ? err : {success: result}));
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("detect_column_types", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new MapD_create_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_table.length === 3) {
    Q.fcall(this._handler.create_table, args.session, args.table_name, args.row_desc)
      .then(function(result) {
        var result = new MapD_create_table_result({success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_create_table_result(err);
          output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_table(args.session, args.table_name, args.row_desc, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_create_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_import_table = function(seqid, input, output) {
  var args = new MapD_import_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_table.length === 4) {
    Q.fcall(this._handler.import_table, args.session, args.table_name, args.file_name, args.copy_params)
      .then(function(result) {
        var result = new MapD_import_table_result({success: result});
        output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_import_table_result(err);
          output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.import_table(args.session, args.table_name, args.file_name, args.copy_params, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_import_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("import_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_import_table_status = function(seqid, input, output) {
  var args = new MapD_import_table_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_table_status.length === 2) {
    Q.fcall(this._handler.import_table_status, args.session, args.import_id)
      .then(function(result) {
        var result = new MapD_import_table_status_result({success: result});
        output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_import_table_status_result(err);
          output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.import_table_status(args.session, args.import_id, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_import_table_status_result((err != null ? err : {success: result}));
        output.writeMessageBegin("import_table_status", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_table_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_link_view = function(seqid, input, output) {
  var args = new MapD_get_link_view_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_link_view.length === 2) {
    Q.fcall(this._handler.get_link_view, args.session, args.link)
      .then(function(result) {
        var result = new MapD_get_link_view_result({success: result});
        output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_link_view_result(err);
          output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_link_view(args.session, args.link, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_link_view_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_link_view", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_link_view", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_create_link = function(seqid, input, output) {
  var args = new MapD_create_link_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_link.length === 3) {
    Q.fcall(this._handler.create_link, args.session, args.view_state, args.view_metadata)
      .then(function(result) {
        var result = new MapD_create_link_result({success: result});
        output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_create_link_result(err);
          output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_link(args.session, args.view_state, args.view_metadata, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_create_link_result((err != null ? err : {success: result}));
        output.writeMessageBegin("create_link", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_link", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_rows_for_pixels = function(seqid, input, output) {
  var args = new MapD_get_rows_for_pixels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_rows_for_pixels.length === 7) {
    Q.fcall(this._handler.get_rows_for_pixels, args.session, args.widget_id, args.pixels, args.table_name, args.col_names, args.column_format, args.nonce)
      .then(function(result) {
        var result = new MapD_get_rows_for_pixels_result({success: result});
        output.writeMessageBegin("get_rows_for_pixels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_rows_for_pixels_result(err);
          output.writeMessageBegin("get_rows_for_pixels", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_rows_for_pixels", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_rows_for_pixels(args.session, args.widget_id, args.pixels, args.table_name, args.col_names, args.column_format, args.nonce, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_rows_for_pixels_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_rows_for_pixels", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_rows_for_pixels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_row_for_pixel = function(seqid, input, output) {
  var args = new MapD_get_row_for_pixel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row_for_pixel.length === 8) {
    Q.fcall(this._handler.get_row_for_pixel, args.session, args.widget_id, args.pixel, args.table_name, args.col_names, args.column_format, args.pixelRadius, args.nonce)
      .then(function(result) {
        var result = new MapD_get_row_for_pixel_result({success: result});
        output.writeMessageBegin("get_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_row_for_pixel_result(err);
          output.writeMessageBegin("get_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_row_for_pixel(args.session, args.widget_id, args.pixel, args.table_name, args.col_names, args.column_format, args.pixelRadius, args.nonce, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_row_for_pixel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_row_for_pixel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_result_row_for_pixel = function(seqid, input, output) {
  var args = new MapD_get_result_row_for_pixel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_result_row_for_pixel.length === 7) {
    Q.fcall(this._handler.get_result_row_for_pixel, args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce)
      .then(function(result) {
        var result = new MapD_get_result_row_for_pixel_result({success: result});
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_result_row_for_pixel_result(err);
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_result_row_for_pixel(args.session, args.widget_id, args.pixel, args.table_col_names, args.column_format, args.pixelRadius, args.nonce, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_result_row_for_pixel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_result_row_for_pixel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_start_heap_profile = function(seqid, input, output) {
  var args = new MapD_start_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start_heap_profile.length === 0) {
    Q.fcall(this._handler.start_heap_profile)
      .then(function(result) {
        var result = new MapD_start_heap_profile_result({success: result});
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_start_heap_profile_result(err);
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.start_heap_profile(function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_start_heap_profile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_stop_heap_profile = function(seqid, input, output) {
  var args = new MapD_stop_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stop_heap_profile.length === 0) {
    Q.fcall(this._handler.stop_heap_profile)
      .then(function(result) {
        var result = new MapD_stop_heap_profile_result({success: result});
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_stop_heap_profile_result(err);
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stop_heap_profile(function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_stop_heap_profile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_get_heap_profile = function(seqid, input, output) {
  var args = new MapD_get_heap_profile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_heap_profile.length === 0) {
    Q.fcall(this._handler.get_heap_profile)
      .then(function(result) {
        var result = new MapD_get_heap_profile_result({success: result});
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_get_heap_profile_result(err);
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_heap_profile(function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_get_heap_profile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_heap_profile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_import_geo_table = function(seqid, input, output) {
  var args = new MapD_import_geo_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.import_geo_table.length === 4) {
    Q.fcall(this._handler.import_geo_table, args.session, args.file_name, args.table_name, args.copy_params)
      .then(function(result) {
        var result = new MapD_import_geo_table_result({success: result});
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_import_geo_table_result(err);
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.import_geo_table(args.session, args.file_name, args.table_name, args.copy_params, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_import_geo_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("import_geo_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_start_query = function(seqid, input, output) {
  var args = new MapD_start_query_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start_query.length === 4) {
    Q.fcall(this._handler.start_query, args.session, args.query, args.column_format, args.nonce)
      .then(function(result) {
        var result = new MapD_start_query_result({success: result});
        output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_start_query_result(err);
          output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.start_query(args.session, args.query, args.column_format, args.nonce, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_start_query_result((err != null ? err : {success: result}));
        output.writeMessageBegin("start_query", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MapDProcessor.prototype.process_execute_step = function(seqid, input, output) {
  var args = new MapD_execute_step_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.execute_step.length === 1) {
    Q.fcall(this._handler.execute_step, args.query_id)
      .then(function(result) {
        var result = new MapD_execute_step_result({success: result});
        output.writeMessageBegin("execute_step", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
          var result = new MapD_execute_step_result(err);
          output.writeMessageBegin("execute_step", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("execute_step", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.execute_step(args.query_id, function (err, result) {
      if (err == null || err instanceof ttypes.TMapDException || err instanceof ttypes.ThriftException) {
        var result = new MapD_execute_step_result((err != null ? err : {success: result}));
        output.writeMessageBegin("execute_step", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute_step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

